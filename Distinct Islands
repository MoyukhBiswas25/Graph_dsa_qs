#include<vector>
#include<queue>
#include<set>

void bfs(int** arr, int n, int m, int r, int c, vector<vector<bool>> & vis, vector<pair<int, int>> &distIsland){
    queue<pair<int, int>> q;
    q.push({r, c});
    int del_row[] = {0, 0, 1, -1};
    int del_col[] = {1, -1, 0, 0};
    while(!q.empty()){
        int R = q.front().first;
        int C = q.front().second;

        q.pop();

        for(int i = 0; i<4; i++){
            int row = R + del_row[i];
            int col = C + del_col[i];

            if(row>=0 && row<n && col>=0 && col<m && !vis[row][col] && arr[row][col]==1){
                vis[row][col] = true;
                distIsland.push_back({r - row, c - col});
                q.push({row, col});
            }
        }
    }
}

int distinctIslands(int** arr, int n, int m)
{
    vector<vector<bool>> vis(n, vector<bool>(m, false));

    set<vector<pair<int, int>>> s;

    for(int i = 0; i<n; i++){
        for(int j = 0; j<m; j++){
            if(arr[i][j]==1 && !vis[i][j]){
                vis[i][j] = true;
                vector<pair<int, int>> distIsland;
                distIsland.push_back({0, 0});
                bfs(arr, n, m, i, j, vis, distIsland);
                s.insert(distIsland);

            }
        }
    }
    return s.size();
}
