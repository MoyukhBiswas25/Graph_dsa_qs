int matrixTraps(int n,int m,vector<vector<int>> &matrix)
{
    vector<vector<bool>> vis(n, vector<bool>(m, false));
    queue<pair<int, int>> q;

    for(int i = 0; i < m; i++){
        if(matrix[0][i]==0){
            vis[0][i] = true;
            q.push({0, i});
        }
        if(matrix[n-1][i]==0){
            vis[n-1][i] = true;
            q.push({n-1, i});
        }
    }

    for(int i = 1; i < n-1; i++){
        if(matrix[i][0]==0){
            vis[i][0] = true;
            q.push({i, 0});
        }
        if(matrix[i][m-1]==0){
            vis[i][m-1] = true;
            q.push({i, m-1});
        }
    }
    int del_row[] = {0, 0, 1, -1};
    int del_col[] = {1, -1, 0, 0};

    while(!q.empty()){
        int r = q.front().first;
        int c = q.front().second;
        q.pop();

        for(int i = 0; i<4; i++){
            int row = r + del_row[i];
            int col = c + del_col[i];

            if(row>=0 && row<n && col>=0 && col<m && !vis[row][col] && matrix[row][col]==0){
                vis[row][col] = true;
                q.push({row, col});
            }
        }

    }

    int count = 0;

    for(int i = 1; i<n-1; i++){
        for(int j = 1; j<m-1; j++){
            if(matrix[i][j]==0 && !vis[i][j])
                count+=1;
        }
    }
    return count;
}
